"""
predictor.py - Module d·ª± ƒëo√°n s·ª≠ d·ª•ng Machine Learning model

Module n√†y ch·ª©a logic ƒë·ªÉ:
1. Load model ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
2. Chu·∫©n b·ªã features t·ª´ d·ªØ li·ªáu tr·∫≠n ƒë·∫•u m·ªõi
3. ƒê∆∞a ra d·ª± ƒëo√°n v√† khuy·∫øn ngh·ªã
"""

import os
import logging
from typing import Dict, Any, Optional
import pickle

import pandas as pd
import numpy as np

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn model file
MODEL_PATH = 'epl_prediction_model.pkl'


def load_model():
    """
    Load model Machine Learning ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
    
    Returns:
        Model object ho·∫∑c None n·∫øu kh√¥ng t√¨m th·∫•y
    """
    if not os.path.exists(MODEL_PATH):
        logger.warning(f'Model file kh√¥ng t·ªìn t·∫°i: {MODEL_PATH}')
        return None
    
    try:
        with open(MODEL_PATH, 'rb') as f:
            model = pickle.load(f)
        logger.info(f'ƒê√£ load model t·ª´ {MODEL_PATH}')
        return model
    except Exception as e:
        logger.error(f'L·ªói khi load model: {e}')
        return None


def prepare_features(home_stats: Dict[str, Any], away_stats: Dict[str, Any], 
                     odds_data: Optional[Dict[str, Any]] = None) -> pd.DataFrame:
    """
    Chu·∫©n b·ªã features t·ª´ d·ªØ li·ªáu th·ªëng k√™ v√† k√®o
    
    Features ph·∫£i gi·ªëng h·ªát v·ªõi nh·ªØng g√¨ ƒë∆∞·ª£c d√πng khi training model
    
    Args:
        home_stats: Th·ªëng k√™ ƒë·ªôi nh√†
        away_stats: Th·ªëng k√™ ƒë·ªôi kh√°ch
        odds_data: D·ªØ li·ªáu k√®o (optional)
    
    Returns:
        DataFrame ch·ª©a m·ªôt d√≤ng v·ªõi t·∫•t c·∫£ features
    """
    features = {}
    
    # Feature t·ª´ ƒë·ªôi nh√†
    features['home_goals_scored_avg'] = home_stats.get('goals_scored_avg', 0)
    features['home_goals_conceded_avg'] = home_stats.get('goals_conceded_avg', 0)
    features['home_goals_avg'] = home_stats.get('home_goals_avg', 0)
    features['home_shots_per_game'] = home_stats.get('shots_per_game', 0)
    features['home_possession_avg'] = home_stats.get('possession_avg', 0)
    features['home_points_last_5'] = home_stats.get('points_last_5', 0)
    
    # Feature t·ª´ ƒë·ªôi kh√°ch
    features['away_goals_scored_avg'] = away_stats.get('goals_scored_avg', 0)
    features['away_goals_conceded_avg'] = away_stats.get('goals_conceded_avg', 0)
    features['away_goals_avg'] = away_stats.get('away_goals_avg', 0)
    features['away_shots_per_game'] = away_stats.get('shots_per_game', 0)
    features['away_possession_avg'] = away_stats.get('possession_avg', 0)
    features['away_points_last_5'] = away_stats.get('points_last_5', 0)
    
    # Feature t·ª´ k√®o (n·∫øu c√≥)
    if odds_data:
        features['handicap_value'] = odds_data.get('handicap_value', 0)
        features['home_odds'] = odds_data.get('home_odds', 2.0)
        features['away_odds'] = odds_data.get('away_odds', 2.0)
    else:
        features['handicap_value'] = 0
        features['home_odds'] = 2.0
        features['away_odds'] = 2.0
    
    # T·∫°o DataFrame
    df = pd.DataFrame([features])
    
    return df


def predict_match(home_stats: Dict[str, Any], away_stats: Dict[str, Any], 
                  odds_data: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
    """
    D·ª± ƒëo√°n k·∫øt qu·∫£ k√®o ch·∫•p cho tr·∫≠n ƒë·∫•u
    
    Args:
        home_stats: Th·ªëng k√™ ƒë·ªôi nh√†
        away_stats: Th·ªëng k√™ ƒë·ªôi kh√°ch
        odds_data: D·ªØ li·ªáu k√®o (optional)
    
    Returns:
        Dictionary ch·ª©a d·ª± ƒëo√°n v√† c√°c th√¥ng tin li√™n quan
    """
    # Load model
    model = load_model()
    
    if model is None:
        logger.warning('Model ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán. S·ª≠ d·ª•ng d·ª± ƒëo√°n d·ª±a tr√™n th·ªëng k√™ c∆° b·∫£n.')
        # Fallback: D·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n form
        return predict_without_model(home_stats, away_stats, odds_data)
    
    # Chu·∫©n b·ªã features
    features_df = prepare_features(home_stats, away_stats, odds_data)
    
    try:
        # D·ª± ƒëo√°n
        # prediction = 1 nghƒ©a l√† ƒë·ªôi nh√† th·∫Øng k√®o, 0 nghƒ©a l√† ƒë·ªôi kh√°ch th·∫Øng k√®o
        prediction = model.predict(features_df)[0]
        
        # L·∫•y x√°c su·∫•t (confidence)
        if hasattr(model, 'predict_proba'):
            probabilities = model.predict_proba(features_df)[0]
            confidence = probabilities[int(prediction)]
        else:
            confidence = 0.6  # Default confidence n·∫øu model kh√¥ng h·ªó tr·ª£ predict_proba
        
        # T·∫°o khuy·∫øn ngh·ªã
        if prediction == 1:
            recommendation = f"Ch·ªçn {home_stats['team_name']} th·∫Øng k√®o"
        else:
            recommendation = f"Ch·ªçn {away_stats['team_name']} th·∫Øng k√®o"
        
        # T·∫°o t√≥m t·∫Øt th·ªëng k√™
        stats_summary = generate_stats_summary(home_stats, away_stats)
        
        result = {
            'prediction': int(prediction),
            'confidence': float(confidence),
            'recommendation': recommendation,
            'stats_summary': stats_summary,
            'model_used': True
        }
        
        logger.info(f'D·ª± ƒëo√°n: {recommendation} (Confidence: {confidence:.2%})')
        
        return result
        
    except Exception as e:
        logger.error(f'L·ªói khi d·ª± ƒëo√°n: {e}', exc_info=True)
        return predict_without_model(home_stats, away_stats, odds_data)


def predict_without_model(home_stats: Dict[str, Any], away_stats: Dict[str, Any],
                          odds_data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """
    D·ª± ƒëo√°n ƒë∆°n gi·∫£n d·ª±a tr√™n th·ªëng k√™ khi kh√¥ng c√≥ model
    
    D√πng heuristic: So s√°nh form, goals scored/conceded
    """
    logger.info('S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p d·ª± ƒëo√°n ƒë∆°n gi·∫£n (kh√¥ng d√πng ML model)')
    
    # T√≠nh ƒëi·ªÉm cho m·ªói ƒë·ªôi
    home_score = 0
    away_score = 0
    
    # So s√°nh form
    home_points = home_stats.get('points_last_5', 0)
    away_points = away_stats.get('points_last_5', 0)
    if home_points > away_points:
        home_score += 2
    elif away_points > home_points:
        away_score += 2
    
    # So s√°nh goals scored
    home_goals = home_stats.get('goals_scored_avg', 0)
    away_goals = away_stats.get('goals_scored_avg', 0)
    if home_goals > away_goals:
        home_score += 1
    elif away_goals > home_goals:
        away_score += 1
    
    # So s√°nh goals conceded (c√†ng √≠t c√†ng t·ªët)
    home_conceded = home_stats.get('goals_conceded_avg', 999)
    away_conceded = away_stats.get('goals_conceded_avg', 999)
    if home_conceded < away_conceded:
        home_score += 1
    elif away_conceded < home_conceded:
        away_score += 1
    
    # L·ª£i th·∫ø s√¢n nh√†
    home_score += 1
    
    # Quy·∫øt ƒë·ªãnh
    if home_score > away_score:
        prediction = 1
        recommendation = f"Ch·ªçn {home_stats['team_name']} th·∫Øng k√®o"
        confidence = 0.55 + (home_score - away_score) * 0.05
    else:
        prediction = 0
        recommendation = f"Ch·ªçn {away_stats['team_name']} th·∫Øng k√®o"
        confidence = 0.55 + (away_score - home_score) * 0.05
    
    confidence = min(confidence, 0.75)  # Cap ·ªü 75%
    
    stats_summary = generate_stats_summary(home_stats, away_stats)
    
    return {
        'prediction': prediction,
        'confidence': confidence,
        'recommendation': recommendation,
        'stats_summary': stats_summary,
        'model_used': False
    }


def generate_stats_summary(home_stats: Dict[str, Any], away_stats: Dict[str, Any]) -> str:
    """
    T·∫°o chu·ªói t√≥m t·∫Øt th·ªëng k√™ ƒë·ªÉ hi·ªÉn th·ªã
    """
    home_name = home_stats['team_name']
    away_name = away_stats['team_name']
    
    summary = f"""
üè† **{home_name}**
   ‚Ä¢ Goals/tr·∫≠n: {home_stats.get('goals_scored_avg', 0):.1f}
   ‚Ä¢ Th·ªßng l∆∞·ªõi/tr·∫≠n: {home_stats.get('goals_conceded_avg', 0):.1f}
   ‚Ä¢ ƒêi·ªÉm 5 tr·∫≠n g·∫ßn nh·∫•t: {home_stats.get('points_last_5', 0)}

‚úàÔ∏è **{away_name}**
   ‚Ä¢ Goals/tr·∫≠n: {away_stats.get('goals_scored_avg', 0):.1f}
   ‚Ä¢ Th·ªßng l∆∞·ªõi/tr·∫≠n: {away_stats.get('goals_conceded_avg', 0):.1f}
   ‚Ä¢ ƒêi·ªÉm 5 tr·∫≠n g·∫ßn nh·∫•t: {away_stats.get('points_last_5', 0)}
"""
    
    return summary.strip()


def main():
    """
    Test predictor v·ªõi mock data
    """
    logger.info('=== TEST PREDICTOR ===')
    
    # Mock data
    home_stats = {
        'team_name': 'Arsenal',
        'goals_scored_avg': 2.1,
        'goals_conceded_avg': 0.9,
        'home_goals_avg': 2.5,
        'shots_per_game': 15.2,
        'possession_avg': 58.3,
        'points_last_5': 13
    }
    
    away_stats = {
        'team_name': 'Manchester United',
        'goals_scored_avg': 1.8,
        'goals_conceded_avg': 1.2,
        'away_goals_avg': 1.4,
        'shots_per_game': 12.8,
        'possession_avg': 52.1,
        'points_last_5': 10
    }
    
    odds_data = {
        'asian_handicap': 'Arsenal -0.5',
        'handicap_value': -0.5,
        'home_odds': 1.95,
        'away_odds': 1.95
    }
    
    # D·ª± ƒëo√°n
    result = predict_match(home_stats, away_stats, odds_data)
    
    if result:
        print(f"\n{'='*50}")
        print(f"Khuy·∫øn ngh·ªã: {result['recommendation']}")
        print(f"ƒê·ªô tin c·∫≠y: {result['confidence']:.1%}")
        print(f"D√πng ML Model: {'C√≥' if result['model_used'] else 'Kh√¥ng'}")
        print(f"{'='*50}")
        print(f"\nTh·ªëng k√™:\n{result['stats_summary']}")
    
    logger.info('=== K·∫æT TH√öC TEST ===')


if __name__ == '__main__':
    main()
